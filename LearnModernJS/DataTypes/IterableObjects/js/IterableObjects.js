`use strict`;

// // —Å–æ–∑–¥–∞–¥–∏–º –æ–±—ä–µ–∫—Ç, –Ω–µ —è–≤–ª—è—é—â–∏–π—Å—è –∏—Ç–µ—Ä–∏—Ä—É–µ–º—ã–º (—Ü–∏–∫–ª for (... of ...) –Ω–µ –∑–∞–ø—É—Å—Ç–∏—Ç—Å—è)
// const range = {
//   from: 1,
//   to: 5,
// };

// // –¥–ª—è –∏—Ç–µ—Ä–∏—Ä—É–µ–º–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–±–∞–≤–∏—Ç—å –º–µ—Ç–æ–¥ Symbol.iterator —Å –º–µ—Ç–æ–¥–æ–º next()

// range[Symbol.iterator] = function () {
//   // –¥–æ–±–∞–≤–∏–º —Å–∞–º –æ–±—ä–µ–∫—Ç –∏—Ç–µ—Ä–∞—Ç–æ—Ä–∞
//   // —Ç–µ–ø–µ—Ä—å —Ü–∏–∫–ª for (... of ...) –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Å —ç—Ç–∏–º –æ–±—ä–µ–∫—Ç–æ–º
//   return {
//     current: this.from,
//     last: this.to,

//     // –º–µ—Ç–æ–¥ next() —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –∫–∞–∂–¥–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏ —Ü–∏–∫–ª–∞
//     // –º–µ—Ç–æ–¥ next() –∏–º–µ–µ—Ç –≤–∏–¥ {done: Boolean, value: any},
//     // –≥–¥–µ done=true –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ —Ü–∏–∫–ª –∑–∞–≤–µ—Ä—à—ë–Ω,
//     // –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ value —Å–æ–¥–µ—Ä–∂–∏—Ç –æ—á–µ—Ä–µ–¥–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.
//     next() {
//       if (this.current <= this.last) {
//         return { done: false, value: this.current++ };
//       }
//       return { done: true };
//     },
//   };
// };

// –∏–ª–∏ –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –≤ —Å–∞–º–æ–º –æ–±—ä–µ–∫—Ç–µ range –º–µ—Ç–æ–¥ next()
const range = {
  from: 1,
  to: 5,

  [Symbol.iterator]() {
    this.current = this.from;
    return this;
  },

  next() {
    if (this.current <= this.to) {
      return { done: false, value: this.current++ };
    }
    return { done: true };
  },
};

for (const key of range) {
  console.log(key);
}

// –∏—Ç–µ—Ä–∞—Ü–∏—è —Å—Ç—Ä–æ–∫
const str = `–ü—Ä–∏–≤–µ—ÇüòÇ`;

for (const char of str) {
  console.log(char);
}

// –∏—Ç–µ—Ä–∞—Ü–∏—è –≤ —Ä—É—á–Ω—É—é —Å –ø–æ–º–æ—â—å—é Symbol.iteration()
const iterator = str[Symbol.iterator]();
while (true) {
  const char = iterator.next();
  if (char.done) break;
  console.log(char.value);
}

// —Å–æ–∑–¥–∞–¥–∏–º –ø—Å–µ–≤–¥–æ–º–∞—Å—Å–∏–≤. –û–±—ä–µ–∫—Ç —Å –∏–Ω–¥–µ–∫—Å–∞–º–∏ –∏ —Å–≤–æ–π—Å—Ç–≤–æ–º length. –≠—Ç–æ –Ω–µ–∏—Ç–µ—Ä–∏—Ä—É–µ–º—ã–π –æ–±—ä–µ–∫—Ç
const arrayLike = {
  0: `Hello`,
  1: `Goodbye`,
  length: 2,
};

// –≠—Ç–æ –Ω–µ –º–∞—Å—Å–∏–≤, –ø–æ—ç—Ç–æ–º—É –º—ã –Ω–µ –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–µ—Ç–æ–¥—ã –∏ —Å–≤–æ–π—Å—Ç–≤–∞ –º–∞—Å—Å–∏–≤–æ–≤
// –ú–µ—Ç–æ–¥ Array.from(name) –ø—Ä–µ–≤—Ä–∞—â–∞–µ—Ç –∏—Ç–µ—Ä–∏—Ä—É–µ–º—ã–π –æ–±—ä–µ–∫—Ç –∏–ª–∏ –ø—Å–µ–≤–¥–æ–º–∞—Å—Å–∏–≤—ã –≤ –º–∞—Å—Å–∏–≤—ã

const arr1 = Array.from(arrayLike);
arr1.push(`Monday`);
console.log(arr1);

const arr2 = Array.from(str);
console.log(arr2);
